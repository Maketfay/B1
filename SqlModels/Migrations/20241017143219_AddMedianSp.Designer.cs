// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SqlModels;

#nullable disable

namespace SqlModels.Migrations
{
    [DbContext(typeof(WebContext))]
    [Migration("20241017143219_AddMedianSp")]
    partial class AddMedianSp
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("SqlModels.Entities.BankAccountBalanceGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BankAccountGroupId")
                        .HasColumnType("int");

                    b.Property<int>("GroupIndex")
                        .HasColumnType("int");

                    b.ComplexProperty<Dictionary<string, object>>("AggregatedInfo", "SqlModels.Entities.BankAccountBalanceGroup.AggregatedInfo#BankSheetInfo", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<decimal>("IncomingBalanceActive")
                                .HasColumnType("decimal(65,30)");

                            b1.Property<decimal>("IncomingBalancePassive")
                                .HasColumnType("decimal(65,30)");

                            b1.Property<decimal>("OutgoingBalanceActive")
                                .HasColumnType("decimal(65,30)");

                            b1.Property<decimal>("OutgoingBalancePassive")
                                .HasColumnType("decimal(65,30)");

                            b1.Property<decimal>("TurnoverCredit")
                                .HasColumnType("decimal(65,30)");

                            b1.Property<decimal>("TurnoverDebit")
                                .HasColumnType("decimal(65,30)");
                        });

                    b.HasKey("Id");

                    b.HasIndex("BankAccountGroupId");

                    b.ToTable("BankAccountBalanceGroups");
                });

            modelBuilder.Entity("SqlModels.Entities.BankAccountData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountNumber")
                        .HasColumnType("int");

                    b.Property<int>("BankAccountBalanceGroupId")
                        .HasColumnType("int");

                    b.ComplexProperty<Dictionary<string, object>>("Info", "SqlModels.Entities.BankAccountData.Info#BankSheetInfo", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<decimal>("IncomingBalanceActive")
                                .HasColumnType("decimal(65,30)");

                            b1.Property<decimal>("IncomingBalancePassive")
                                .HasColumnType("decimal(65,30)");

                            b1.Property<decimal>("OutgoingBalanceActive")
                                .HasColumnType("decimal(65,30)");

                            b1.Property<decimal>("OutgoingBalancePassive")
                                .HasColumnType("decimal(65,30)");

                            b1.Property<decimal>("TurnoverCredit")
                                .HasColumnType("decimal(65,30)");

                            b1.Property<decimal>("TurnoverDebit")
                                .HasColumnType("decimal(65,30)");
                        });

                    b.HasKey("Id");

                    b.HasIndex("BankAccountBalanceGroupId");

                    b.ToTable("BankAccountDatas");
                });

            modelBuilder.Entity("SqlModels.Entities.BankAccountGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BankBalanceSheetId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.ComplexProperty<Dictionary<string, object>>("AggregatedInfo", "SqlModels.Entities.BankAccountGroup.AggregatedInfo#BankSheetInfo", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<decimal>("IncomingBalanceActive")
                                .HasColumnType("decimal(65,30)");

                            b1.Property<decimal>("IncomingBalancePassive")
                                .HasColumnType("decimal(65,30)");

                            b1.Property<decimal>("OutgoingBalanceActive")
                                .HasColumnType("decimal(65,30)");

                            b1.Property<decimal>("OutgoingBalancePassive")
                                .HasColumnType("decimal(65,30)");

                            b1.Property<decimal>("TurnoverCredit")
                                .HasColumnType("decimal(65,30)");

                            b1.Property<decimal>("TurnoverDebit")
                                .HasColumnType("decimal(65,30)");
                        });

                    b.HasKey("Id");

                    b.HasIndex("BankBalanceSheetId");

                    b.ToTable("BankAccountGroups");
                });

            modelBuilder.Entity("SqlModels.Entities.BankBalanceSheet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BankName")
                        .HasColumnType("longtext");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime(6)");

                    b.ComplexProperty<Dictionary<string, object>>("AggregatedInfo", "SqlModels.Entities.BankBalanceSheet.AggregatedInfo#BankSheetInfo", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<decimal>("IncomingBalanceActive")
                                .HasColumnType("decimal(65,30)");

                            b1.Property<decimal>("IncomingBalancePassive")
                                .HasColumnType("decimal(65,30)");

                            b1.Property<decimal>("OutgoingBalanceActive")
                                .HasColumnType("decimal(65,30)");

                            b1.Property<decimal>("OutgoingBalancePassive")
                                .HasColumnType("decimal(65,30)");

                            b1.Property<decimal>("TurnoverCredit")
                                .HasColumnType("decimal(65,30)");

                            b1.Property<decimal>("TurnoverDebit")
                                .HasColumnType("decimal(65,30)");
                        });

                    b.HasKey("Id");

                    b.ToTable("BankBalanceSheets");
                });

            modelBuilder.Entity("SqlModels.Entities.RandomFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CyrillicWord")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LatinWord")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("RandomDouble")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("RandomInteger")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("RandomFiles");
                });

            modelBuilder.Entity("SqlModels.Entities.BankAccountBalanceGroup", b =>
                {
                    b.HasOne("SqlModels.Entities.BankAccountGroup", null)
                        .WithMany("BalanceGroups")
                        .HasForeignKey("BankAccountGroupId");
                });

            modelBuilder.Entity("SqlModels.Entities.BankAccountData", b =>
                {
                    b.HasOne("SqlModels.Entities.BankAccountBalanceGroup", "BankAccountBalanceGroup")
                        .WithMany("Data")
                        .HasForeignKey("BankAccountBalanceGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BankAccountBalanceGroup");
                });

            modelBuilder.Entity("SqlModels.Entities.BankAccountGroup", b =>
                {
                    b.HasOne("SqlModels.Entities.BankBalanceSheet", "BankBalanceSheet")
                        .WithMany("Groups")
                        .HasForeignKey("BankBalanceSheetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BankBalanceSheet");
                });

            modelBuilder.Entity("SqlModels.Entities.BankAccountBalanceGroup", b =>
                {
                    b.Navigation("Data");
                });

            modelBuilder.Entity("SqlModels.Entities.BankAccountGroup", b =>
                {
                    b.Navigation("BalanceGroups");
                });

            modelBuilder.Entity("SqlModels.Entities.BankBalanceSheet", b =>
                {
                    b.Navigation("Groups");
                });
#pragma warning restore 612, 618
        }
    }
}
